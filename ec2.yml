---
- name: "Create an ec2-instance instance"
  hosts: localhost
  become: true
  vars_files:
    - ec2.vars
  tasks:
    
    - name: "Create keypair"
      ec2_key:
        name: "ansible-key"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ reg }}"
      register: key_result
        
    - name: "Saving private key"
      when: key_result.changed
      copy:
        content: "{{ key_result.key.private_key }}"
        dest: ./ansible-key.pem
        mode: 0400
            
    - name: "Create security group"
      ec2_group:
        name: "web-sg"
        description: "Allow 22, 80 and 443"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ reg }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
      register: sg_result
        
    - name: "Create ec2-instance"
      ec2:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ reg }}"
        key_name: "{{ key_result.key.name }}"
        group_id: "{{ sg_result.group_id }}"
        instance_type: "{{ type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
          Name: webserver
        count_tag:
          Name: webserver
        exact_count: 1
      register: ec2_result
        
    - name: "Adding ec2 instance to dynamic inventory"
      add_host:
        name: "{{ item.public_ip}}"
        groups: "webserver"
        ansible_host: "{{ item.public_ip }}"
        ansible_user: "ec2-user"
        ansible_port: 22
        ansible_ssh_private_key_file: "./ansible-key.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items:
        - "{{ ec2_result.tagged_instances }}"
        
- name: "Set up webserver"
  hosts: webserver
  become: true
  vars_files:
    - ec2.vars
  tasks:
    
    - name: "Installing apache"
      yum:
        name: httpd
        state: present
            
    - name: "Download website content"
      get_url:
        url: "{{ web_url }}"
        dest: /tmp/
            
    - name: "Extracting the tarfile"
      unarchive:
        src: /tmp/{{ web_url_file }}
        dest: /tmp/
        remote_src: true
            
    - name: "Copying website content"
      copy:
        src: /tmp/{{ website_content }}/
        dest: /var/www/html/
        remote_src: true
      register: content_status
            
    - name: "Restart/enable apache"
      when: content_status.changed
      service:
        name: httpd
        state: restarted
        enabled: true
